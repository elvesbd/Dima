@inherits LayoutComponentBase

<MudThemeProvider
    @ref="_mudThemeProvider"
    @bind-IsDarkMode="_isDarkMode"
    Theme="Configuration.Theme" />
<MudSnackbarProvider />
<MudDialogProvider />
<MudPopoverProvider />

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton
                    Edge="Edge.Start"
                    Color="Color.Inherit"
                    @onclick="ToggleDrawer"
                    Icon="@Icons.Material.Filled.Menu" />
                Dima
                <MudSpacer/>
                <MudButton Href="/lancamentos/novo" Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Add" Color="Color.Secondary">
                    Novo Lançamento
                </MudButton>
                <MudSpacer/>

                <MudText Typo="Typo.caption">
                    @context.User.Identity?.Name
                </MudText>

                <MudSwitch
                    T="bool"
                    Class="ma-4"
                    Color="Color.Inherit"
                    @bind-Value="@_isDarkMode"
                    ThumbIcon="@Icons.Material.TwoTone.Lightbulb" />
            </MudAppBar>
            
            <MudDrawer @bind-Open="@_isDrawerOpened">
                <NavMenu />
            </MudDrawer>
            
            <MudMainContent>
                <MudContainer Class="mt-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    
    <NotAuthorized>
        <LoginRedirect />
    </NotAuthorized>
</AuthorizeView>

@code
{
    private bool _isDrawerOpened = true;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
            await _mudThemeProvider.WatchSystemDarkModeAsync(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ToggleDrawer() => _isDrawerOpened = !_isDrawerOpened;
}
